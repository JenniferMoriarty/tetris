//tetris version 2
//only line pieces, but otherwise functional complete game
//strange bug where rotating pieces will sometimes erase landed pieces

#include<iostream>
using namespace std;
#include <allegro5\allegro.h>
#include<allegro5\allegro_primitives.h>
#include<allegro5\allegro_image.h>
#include<allegro5\allegro_font.h>
#include<allegro5\allegro_ttf.h>
#include<vector>
#include"line.h"

const int SCREEN_WIDTH = 500;
const int SCREEN_HEIGHT = 800;
const int FPS = 60;

bool cullGrid();

int grid[10][16] = {
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0

};

enum MYKEYS {
	KEY_LEFT, KEY_RIGHT, KEY_SPACE, KEY_DOWN
};

int main() {
	al_init();
	al_init_primitives_addon();
	al_init_image_addon();
	al_install_keyboard();
	al_init_primitives_addon();
	al_init_font_addon();
	al_init_ttf_addon();


	srand(time(NULL));

	ALLEGRO_TIMER *timer = al_create_timer(1.0 / FPS);
	ALLEGRO_DISPLAY *display = al_create_display(SCREEN_WIDTH, SCREEN_HEIGHT);
	ALLEGRO_EVENT_QUEUE *event_queue = al_create_event_queue();
	ALLEGRO_FONT *font = al_load_font("myfont.TTF", 40, 0);
	bool doexit = false;
	int ticker = 0;
	int moveTimer = 0;
	bool key[4] = { false, false, false,false };
	bool redraw = true;
	bool ActivePiece = false;

	vector<line *> pieces;
	vector<line *>::iterator iter;

	//allegro start up stuff
	{
		al_set_target_bitmap(al_get_backbuffer(display));

		al_register_event_source(event_queue, al_get_display_event_source(display));

		al_register_event_source(event_queue, al_get_timer_event_source(timer));

		al_register_event_source(event_queue, al_get_keyboard_event_source());

		al_clear_to_color(al_map_rgb(0, 0, 0));

		al_flip_display();

		al_start_timer(timer);
	}

	while (!doexit) {
	
		//cout << "game loop" << endl;
		ALLEGRO_EVENT ev;
		al_wait_for_event(event_queue, &ev);

		//timer section//////////////////////////////////////////////////////////////////////////////////
		if (ev.type == ALLEGRO_EVENT_TIMER) {
			//cout << "active piece is " << ActivePiece << endl;
			ticker++;
			moveTimer++;
			//cout << "ticker is " << ticker << endl;
			//cull the grid
			if(ticker>50)
				if (cullGrid() == true) 
				ticker = 0;
				
			if (moveTimer > 5) {
				if (key[KEY_LEFT]) {
					for (iter = pieces.begin(); iter != pieces.end(); iter++) {
						(*iter)->MoveSideways('l', grid);
					}
				}

				if (key[KEY_RIGHT]) {
					for (iter = pieces.begin(); iter != pieces.end(); iter++) {
						(*iter)->MoveSideways('r', grid);
					}
				}

				if (key[KEY_DOWN]) {
					for (iter = pieces.begin(); iter != pieces.end(); iter++) {
						(*iter)->MoveSideways('d', grid);
					}
				}

				if (key[KEY_SPACE]) {
					for (iter = pieces.begin(); iter != pieces.end(); iter++) {
						(*iter)->turn('r');
					}
				}
				moveTimer = 0;
			}
			


			//create new piece
			if (ActivePiece == false && ticker > 50) {
				line *newline = new line((rand() % 10) * 50, 0);
				//cout << "pushing in new piece";
				pieces.push_back(newline);
				ActivePiece = true;
			}

			//check if player has lost 
			for (iter = pieces.begin(); iter != pieces.end(); iter++) {
				if ((*iter)->checkCollision(grid)) {
					cout << "y value is " << (*iter)->getY() << endl;
					if ((*iter)->getY() <= 0) {
						cout << "game over!" << endl;
						doexit = true;
					}
				}
			}


			//check if a piece has hit the bottom or other piece (changed into a function from part 1)
			for (iter = pieces.begin(); iter != pieces.end(); iter++) {
				if ((*iter)->checkCollision(grid)) {
					(*iter)->land(grid);
					ActivePiece = false;
					iter = pieces.erase(iter); //erase the piece from the vector when it lands (this breaks code)
					break; //this fixed it :)
				}

			}
		

			//move pieces if they haven't hit bottom
			for (iter = pieces.begin(); iter != pieces.end(); iter++) {
				if (!(*iter)->isLanded())
					(*iter)->move();

			}

		

			//wipe map
			for (int i = 0; i < 10; i++) {
				for (int j = 0; j < 16; j++) {
					if(grid[i][j] == 1)
						grid[i][j]=0;
				}
			}
			redraw = true;
		}//end timer section


		 //input section//////////////////////////////////////////////////////////////////
		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}
		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
			switch (ev.keyboard.keycode) {


			case ALLEGRO_KEY_LEFT:
				key[KEY_LEFT] = true;
				break;

			case ALLEGRO_KEY_RIGHT:
				key[KEY_RIGHT] = true;
				break;

			case ALLEGRO_KEY_DOWN:
				key[KEY_DOWN] = true;
				break;

			case ALLEGRO_KEY_SPACE:
				key[KEY_SPACE] = true;
				break;
			}
		}
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {


			case ALLEGRO_KEY_LEFT:
				key[KEY_LEFT] = false;
				break;

			case ALLEGRO_KEY_RIGHT:
				key[KEY_RIGHT] = false;
				break;

			case ALLEGRO_KEY_DOWN:
				key[KEY_DOWN] = false;
				break;
			case ALLEGRO_KEY_SPACE:
				key[KEY_SPACE] = false;
				break;

			case ALLEGRO_KEY_ESCAPE:
				doexit = true;
				break;
			}
		}

		//render section///////////////////////////////////////////
		if (redraw && al_is_event_queue_empty(event_queue)) {
			redraw = false;
			al_clear_to_color(al_map_rgb(0, 0, 0));
		
			//draw pieces
			for (iter = pieces.begin(); iter != pieces.end(); iter++) {
					(*iter)->draw(grid);
			}

			for (int i = 0; i < 10; i++) {
				for (int j = 0; j < 16; j++) {
					if (grid[i][j] == 0)//draws grid lines
						al_draw_rectangle(i * 50, j * 50, i * 50 + 50, j * 50 + 50, al_map_rgb(255, 255, 255), 2);
					if (grid[i][j] == 1) {//draws active pieces
						al_draw_filled_rectangle(i * 50, j * 50, i * 50 + 50, j * 50 + 50, al_map_rgb(255, 50, 55));
						al_draw_rectangle(i * 50, j * 50, i * 50 + 50, j * 50 + 50, al_map_rgb(25, 50, 55),4);
					}
					if (grid[i][j] == 10) {//draws inactive pieces
						al_draw_filled_rectangle(i * 50, j * 50, i * 50 + 50, j * 50 + 50, al_map_rgb(255, 50, 55));
						al_draw_rectangle(i * 50, j * 50, i * 50 + 50, j * 50 + 50, al_map_rgb(25, 50, 55), 4);

					}
				}
			}

			al_flip_display();
		}//end render
	}//end game loop

	al_rest(1);
	al_clear_to_color(al_map_rgb(0, 0, 0));
	al_draw_text(font, al_map_rgb(200, 200, 200), 200, 200, NULL, "Game Over!");
	al_flip_display();
	al_rest(3);
	cout << "final map:" << endl;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 16; j++)
			cout << grid[i][j];
		cout << endl;
	}
	system("pause");

	al_destroy_display(display);

}


bool cullGrid() {

	int RowCount = 0;

	for (int k = 0; k < 16; k++) {
		RowCount = 0;
		//count the number of filled squares in bottom row
		for (int i = 0; i < 10; i++) {
			if (grid[i][k] == 10) {
				RowCount++;
				//cout << "rowcount is " << RowCount << endl;
			}
		}
		//if 10 out of 10 squares are filled, move the whole matrix down a row
		if (RowCount == 10) {
			//cout << "culling row "<<k << endl;
			//system("pause");
			for (int i = 0; i < 10; i++)
				for (int j = k; j>0; j--) { //start from the bottom up so we don't erase data
					grid[i][j] = grid[i][j-1];//replaces a row with whatever is above it
				}

			return true;


		}
	}
	return false;

}


//line.cpp
#include"line.h"
#include<allegro5\allegro_primitives.h>

line::line() {
	x = 0;
	y = 0;
	spin = 1;
	landed = false;
}

line::line(int xpos, int ypos) {
	x = xpos;
	y = ypos;
	landed = false;
	spin = 1;
}

void line::move() {

	y+=3;

}

int line::turn(char dir) {


	if (spin == -1) {
		spin *= -1;
		return 1;
	}

	//don't spin if too close to right edge
	if (spin == 1 && (x<(7 * 50)))
		spin *= -1;
	return 1;
}
bool line::isLanded() {

	return landed;

}

void line::draw(int map[10][16]) {

	//turn these on for smoother motion
	//al_draw_filled_rectangle(x, y, x + 50, y + 50 * 4, al_map_rgb(100, 100, 200));
	//al_draw_rectangle(x, y, x + 50, y + 50 * 4, al_map_rgb(100, 200, 200),5);

	if (spin == 1) {
		map[x / 50][y / 50] = 1;
		map[x / 50][(y +50)/ 50] = 1;
		map[x / 50][(y+ 100 )/ 50] = 1;
		map[x / 50][(y + 150) / 50] = 1;
	}
	else if (spin == -1) {
		map[x / 50][y / 50] = 1;
		map[(x+50) / 50][y / 50] = 1;
		map[(x+100) / 50][y  / 50] = 1;
		map[(x+150) / 50][y  / 50] = 1;

	}
}

int line::getY() {
	return y;
}
int line::getX() {
	return x;
}

//this paints the block's final position to the actual map before the piece is destroyed
void line::land(int map[10][16]) {

	landed = true;
	if ((spin == 1) ) {
		map[x / 50][y / 50] = 10;
		map[x / 50][(y + 50) / 50] = 10;
		map[x / 50][(y + 100) / 50] = 10;
		map[x / 50][(y + 150) / 50] = 10;
	}
	if (spin == -1) {
		map[x / 50][(y) / 50] = 10;
		map[(x+50) / 50][(y ) / 50] = 10;
		map[(x+100) / 50][(y ) / 50] = 10;
		map[(x+150) / 50][(y ) / 50] = 10;
	}
}

//moves the piece based on keyboard input
void line::MoveSideways(char dir, int grid[10][16]) {

	if (dir == 'r' && spin == 1 && x < 500 - 50 && (grid[(x + 50) / 50][y / 50] != 10) && (grid[(x + 50) / 50][(y + 100) / 50] != 10) && (grid[(x + 50) / 50][(y + 200) / 50] != 10))
		x += 50;
	else if (dir == 'l'&&x > 0 && (grid[(x - 50) / 50][y / 50] != 10) && (grid[(x - 50) / 50][(y + 100) / 50] != 10) && (grid[(x - 50) / 50][(y + 200) / 50] != 10))
		x -= 50;

	else if (dir == 'd' && y <800-250)
		y += 50;

	else if ((dir == 'r') && (spin == -1) && (x+200<500) && (grid[(x + 200) / 50][y / 50] != 10))
		x += 50;

}

bool line::checkCollision(int grid[10][16]) {

	if (spin == 1) { //line piece is vertical
		if (grid[x / 50][(y + 200) / 50] == 10)
			return true;
		if (y+200 > 800)
			return true;
		else
			return false;


	}
	else if (spin == -1) { //line piece is horizontal

		if (//bottom left corner
			(grid[x / 50][(y+50) / 50] == 10) || 
			//second from left corner
			(grid[(x + 50) / 50][(y+50) / 50] == 10) || 
			//third from left corner
			(grid[(x + 100) / 50][(y+50 )/ 50] == 10) || 
			//fourth from left corner
			(grid[(x + 150) / 50][(y + 50) / 50] == 10) || 
			//bottom right corner
			(grid[(x + 200-10) / 50][(y + 50) / 50] == 10))
			return true;
		if (y + 50 > 800)
			return true;
		else
			return false;

	}
	return false;


}

//line.h
#pragma once

class line {
private:
	int x;
	int y;
	int spin;
	bool landed;


public:
	line();
	line(int xpos, int ypos);
	void move();
	void MoveSideways(char dir, int grid[10][16]);
	int turn(char dir);
	bool isLanded();
	void draw(int map[10][16]);
	int getX();
	int getY();
	void land(int map[10][16]);
	bool checkCollision(int grid[10][16]);
};
